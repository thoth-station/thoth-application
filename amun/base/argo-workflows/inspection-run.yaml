---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: inspection-run-template
spec:
  entrypoint: main

  templates:
    - name: main
      resubmitPendingPods: true
      inputs:
        parameters:
          # Required
          - name: batch-name
          - name: batch-size
          - name: inspection-id
          - name: volume
          # Defaults
          - name: cpu
            value: "750m"
          - name: memory
            value: "1Gi"
      steps:
        - - name: job
            arguments:
              parameters:
                - name: batch-name
                  value: "{{inputs.parameters.batch-name}}"
                - name: inspection-id
                  value: "{{inputs.parameters.inspection-id}}"
                - name: cpu
                  value: "{{inputs.parameters.cpu}}"
                - name: memory
                  value: "{{inputs.parameters.memory}}"
                - name: item
                  value: "{{item}}"
                - name: volume
                  value: "{{inputs.parameters.volume}}"
            template: create-job
            withSequence:
              count: "{{inputs.parameters.batch-size}}"
            continueOn:
              error: true
              failed: true

        - - name: joblog-aggregation
            arguments:
              parameters:
                - name: inspection-id
                  value: "{{inputs.parameters.inspection-id}}"
                - name: volume
                  value: "{{inputs.parameters.volume}}"
                - name: batch-size
                  value: "{{inputs.parameters.batch-size}}"
            template: aggregate-joblog

    - name: create-job
      resubmitPendingPods: true
      inputs:
        parameters:
          - name: inspection-id
          - name: batch-name
          - name: cpu
          - name: memory
          - name: item
          - name: volume
      initContainers:
        - name: inspect-hwinfo
          image: "amun-inspect-hwinfo:latest"
          volumeMounts:
            - mountPath: "/home/amun/results/"
              name: "{{inputs.parameters.volume}}"
          env:
            - name: "THOTH_OUTPUT_PATH"
              value: "/home/amun/results/{{inputs.parameters.item}}/hwinfo"
      metadata:
        # Add labels to easily identify job pods in the namespace during log aggregation.
        labels:
          inspection: job
      podSpecPatch: '{
        "containers": [
        {
        "name": "main",
        "resources": {
        "limits": {
        "cpu": "{{inputs.parameters.cpu}}",
        "memory": "{{inputs.parameters.memory}}"
        },
        "requests": {
        "cpu": "{{inputs.parameters.cpu}}",
        "memory": "{{inputs.parameters.memory}}"
        }
        }
        }
        ]
        }'
      container:
        image: "{{inputs.parameters.inspection-id}}:latest"
        env:
          - name: "THOTH_OUTPUT_PATH"
            value: "/home/amun/results/{{inputs.parameters.item}}/result"
          - name: "THOTH_AMUN_HWINFO_PATH"
            value: "/home/amun/results/{{inputs.parameters.item}}/hwinfo"
        volumeMounts:
          - mountPath: "/home/amun/results/"
            name: "{{inputs.parameters.volume}}"
      outputs:
        artifacts:
          - name: output
            path: "/home/amun/results/"
            archive:
              none: {}

    - name: aggregate-joblog
      resubmitPendingPods: true
      inputs:
        parameters:
          - name: inspection-id
          - name: volume
          - name: batch-size
      outputs:
        artifacts:
          - name: output
            path: "/mnt/results/"
            archive:
              none: {}
      script:
        image: "kubectl"
        imagePullPolicy: Always
        command: [bash]
        source: |-
          set -euxo pipefail

          results=/mnt/results/ ; mkdir -p "$results"
          pod_json=/tmp/amun-inspection-pod.json

          pod_names=$(\
            kubectl get pods \
              --selector workflows.argoproj.io/workflow={{inputs.parameters.inspection-id}},inspection=job \
              --output json |\
            jq -r '.items[].metadata.name' \
          )

          {
            cnt=0
            exit_code=0
            IFS=$'\n' ; for name in $pod_names; do
              let "cnt+=1";
              mkdir -p "${results}/${cnt}"
              kubectl get pod $name -o json > $pod_json

              container_exit_code=`cat $pod_json | \
                jq '.status.containerStatuses[] | \
                select(.name == "main") | .state.terminated.exitCode'`
              let "exit_code+=${container_exit_code}" || :

              # Parse inspection identifier (number of inspection job).
              item=`cat $pod_json | \
                jq '.metadata.annotations."workflows.argoproj.io/node-name"' | \
                sed 's/".*inspection-run.*\.job(\([0-9]*\):.*)"/\1/'`
              mkdir -p "${results}/${item}"
              kubectl logs $name -c main > "${results}/${item}/log"
            done
          }

          # The sum of exit codes is non-zero if any of the containers failed.
          exit $exit_code

        resources:
          limits:
            cpu: 500m
            memory: 256Mi
        volumeMounts:
          - name: "{{inputs.parameters.volume}}"
            mountPath: /mnt/results
